///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2015 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////

// Functions we import from the main game loop. If you find there are some over there that aren't
// yet exported, modify this header then add the mechanics at the top of gameloop.pla.
include "gamelib.plh"

// Data structure definitions
include "playtype.plh"

// Definition of constants for functions exported by this module
include "party.plh"

// Number of items that fit in inventory pane
const INV_PAGE_NUM = 13

// This pointer is the root of all heap-tracked (and garbage collected) objects.
// See playtype.plh for definitions of all the datastructures and how they interconnect.
word global

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the the header.
predef _party_doPlayerSheet
word[] funcTbl = @_party_doPlayerSheet

// Other global variables here

///////////////////////////////////////////////////////////////////////////////////////////////////
// Search item num
def itemNum(player, num)
  word item

  item = player=>p_items
  while item and num
    item = item=>p_nextObj
    num--
  loop
  return item
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Unequip item kind
def unequip(player, type, kind)
  word item

  if not kind; return; fin
  item = player=>p_items
  while item
    if item->t_type == type
      if streqi(item=>s_itemKind, kind)
        item->b_flags = item->b_flags & ~ITEM_FLAG_EQUIP
        return
      fin
    fin
    item = item=>p_nextObj
  loop
end
///////////////////////////////////////////////////////////////////////////////////////////////////
// Display inventory pane
def showInventory(player, page)
  word item
  byte n_item, n_page

  setMapWindow()
  clearWindow()
  rawDisplayStr("^Y^LInventory^L^N")
  displayf1("\nGroup Gold: %d", countGold())
  item = player=>p_items
  n_item = 0
  n_page = page * INV_PAGE_NUM
  if page
    while item and n_item < n_page
      item = item=>p_nextObj
      n_item++
    loop
  fin
  while item and n_item < (n_page + INV_PAGE_NUM)
    displayf2("\n%c) %s", 'A' + n_item, item=>s_name)
    //if item=>s_itemKind
    //  displayf1(" (%s)", item=>s_itemKind)
    //fin
    when item->t_type
      is TYPE_WEAPON
        if item->b_flags & ITEM_FLAG_EQUIP
          displayStr(" +")
        fin
        break
      is TYPE_ARMOR
        if item->b_flags & ITEM_FLAG_EQUIP
          displayStr(" *")
        fin
        break
    wend
    item = item=>p_nextObj
    n_item++
  loop
  while n_item < (n_page + INV_PAGE_NUM)
    displayChar('\n')
    n_item++
  loop
end
// Display skill value
def displaySkill(str, val, col)
  if col & 1
    rawDisplayStr("^T060")
  else
    displayChar('\n')
  fin
  displayf2("%d %s", val, str)
end
// Show player data
def showPlayerSheet(num)
  word player, skill
  byte col

  // Count the number of players
  player = global=>p_players
  while num > 0
    player = player=>p_nextObj
    if !player; return; fin // Not that many players
    num--
  loop

  // First, display the player's name in the title bar
  showMapName(player=>s_name)

  // Show stats in the right panel
  setWindow2()
  clearWindow()
  rawDisplayStr("^Y^LStats^L^N\n")
  displayf1("%d", player=>w_health);       rawDisplayStr("^T024Health\n")
  displayf1("%d", player->b_intelligence); rawDisplayStr("^T024Intelligence\n")
  displayf1("%d", player->b_strength);     rawDisplayStr("^T024Strength\n")
  displayf1("%d", player->b_agility);      rawDisplayStr("^T024Agility\n")
  displayf1("%d", player->b_stamina);      rawDisplayStr("^T024Stamina\n")
  displayf1("%d", player->b_charisma);     rawDisplayStr("^T024Charisma\n")
  displayf1("%d", player->b_spirit);       rawDisplayStr("^T024Spirit\n")
  displayf1("%d", player->b_luck);         rawDisplayStr("^T024Luck\n")
  displayf1("%d", player->b_armor);        rawDisplayStr("^T024Armor\n")

  // Show aquired skills in lower right panel
  setWindow3()
  clearWindow()
  rawDisplayStr("^Y^LSkills^L^N")
  displaySkill("aim", player->b_aiming, 0)
  displaySkill("H2H", player->b_handToHand, 1)
  displaySkill("dodge", player->b_dodging, 0)
  col = 1
  skill = player=>p_skills
  while skill
    displaySkill(skill=>s_name, skill->w_modValue, col)
    skill = skill=>p_nextObj
    col++
  loop
  // Next, show inventory in the main panel
  showInventory(player, 0)
  rawDisplayStr("\n^YE)quip, U)se, D)rop^Y")

  return player
end

// Show player sheet and accept command
def _party_doPlayerSheet(num)
  word player, item
  byte n_item, n_page

  n_page = 0
  repeat
    player = showPlayerSheet(num)
    if !player; return; fin // Invalid player
    // Get a key, do something
    when getUpperKey()
      // Select another player to show
      is '1'; num = 0; n_page = 0; break
      is '2'; num = 1; n_page = 0; break
      is '3'; num = 2; n_page = 0; break
      // Equip player with weapon/armor
      is 'E'
        showInventory(player, n_page)
        rawDisplayStr("\n^YWhich item?^Y")
        item = itemNum(player, getUpperKey() - 'A')
        if item
          if item->t_type == TYPE_WEAPON or item->t_type == TYPE_ARMOR
            unequip(player, item->t_type, item=>s_itemKind)
            item->b_flags = item->b_flags | ITEM_FLAG_EQUIP
            calcPlayerArmor(player)
          fin
        fin
        break
      // Use an item
      is 'U'
        break
      // Drop an item
      is 'D'
        showInventory(player, n_page)
        rawDisplayStr("\n^YWhich item?^Y")
        item = itemNum(player, getUpperKey() - 'A')
        if item
          removeFromList(@player=>p_items, item)
          calcPlayerArmor(player)
        fin
        break
      // Next inventory page
      is '>'
        if itemNum(player, n_page * INV_PAGE_NUM + INV_PAGE_NUM)
          n_page++
        fin
        break
      // Previous inventory page
      is '<'
        if n_page
          n_page--
        fin
        break
      // Other operations...
      is '!'; player=>w_health = player=>w_health + 10; break
      is '$'; addGold(10); break
      // All done
      otherwise return
    wend
  until 0
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
global = getGlobals()
return @funcTbl
done
