///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2015 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////

include "gamelib.plh"
include "globalDefs.plh"
include "playtype.plh"
include "diskops.plh"
include "gen_modules.plh"
include "gen_players.plh"
include "gen_globalScripts.plh"

// ProDOS MLI constants
const MLI_QUIT  = $65
const MLI_GET_TIME  = $82
const MLI_CREATE  = $C0
const MLI_DESTROY = $C1
const MLI_RENAME  = $C2
const MLI_SET_FILE_INFO = $C3
const MLI_GET_FILE_INFO = $C4
const MLI_ONLINE  = $C5
const MLI_SET_PREFIX  = $C6
const MLI_GET_PREFIX  = $C7
const MLI_OPEN  = $C8
const MLI_NEWLINE = $C9
const MLI_READ  = $CA
const MLI_WRITE = $CB
const MLI_CLOSE = $CC
const MLI_FLUSH = $CD
const MLI_SET_MARK  = $CE
const MLI_GET_MARK  = $CF
const MLI_SET_EOF = $D0
const MLI_GET_EOF = $D1
const MLI_SET_BUF = $D2
const MLI_GET_BUF = $D3
 
// This pointer is the root of all heap-tracked (and garbage collected) objects.
// See playtype.plh for definitions of all the datastructures and how they interconnect.
word global

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the the header.
predef _saveGame, _loadGame, _newOrLoadGame
word[] funcTbl = @_saveGame, @_loadGame, @_newOrLoadGame

byte[] game1_filename = "GAME.1.SAVE"

// ProDOS command tables
byte open_params = 3   // parameter count
word open_filename
word open_buffer
byte open_fileref

byte create_params = 7 // parameter count
word create_filename
byte create_accessbits
byte create_filetype
word create_auxtype
byte create_storagetype
word create_date
word create_time

byte write_params = 4  // parameter count
byte write_fileref
word write_addr
word write_length
word write_actual

byte read_params = 4  // parameter count
byte read_fileref
word read_addr
word read_length
word read_actual

byte close_params = 1  // parameter count
byte close_fileref

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definitions used by assembly code
asm __defs

; Use hi-bit ASCII for Apple II
!convtab "../../include/hiBitAscii.ct"

; Headers
!source "../../include/global.i"
!source "../../include/plasma.i"
!source "../../include/mem.i"

; Optional debug printing support
DEBUG   = 0

; General use
tmp         = $2
pTmp        = $4

end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Copy entire heap (Aux LC $D000.DFFF) to or from main $4000.4FFF
asm copyHeap   // params: dir (0=AuxtoMain, 1=MainToAux)
        +asmPlasm_bank2 1
        lsr         ; direction bit to carry flag
        ;sta setAuxZP  ; FIXME: put back when heap moved to aux
        lda #$40
        bcs +
        lda #$F0    ; FIXME, should be $D0 after heap moved to aux
+       sta tmp+1
        eor #$B0    ; FIXME: should be #$90 after heap moved to aux   ; $40->D0, or $D0->40
        sta pTmp+1
        ldy #0
        sty tmp
        sty pTmp
        ldx #8    ; FIXME to #$10
-       lda (tmp),y
        sta (pTmp),y
        iny
        bne -
        inc tmp+1
        inc pTmp+1
        dex
        bne -
        ;sta clrAuxZP  ; FIXME: put back when heap moved to aux
        rts
end

///////////////////////////////////////////////////////////////////////////////////////////////////
asm mliStub 
    ; call MLI directly. Caller is expected to modify the command and param vectors
    ; before calling.
    +asmPlasm 0   ; bytes 0-4
    jsr mli       ; bytes 5-7
    !byte 0       ; byte  8
    !word 0       ; bytes 9-10
    bcs +
    lda #0
+   bit setLcRW+lcBank2 ; Our crazy aux ProDOS stub doesn't preserve the LC bank; put PLASMA back.
    rts
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Clear the text-mode screen, and put the cursor there.
// Params: None
asm home
  +asmPlasm 0
  jmp home
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def callMLI(cmd, p_params)
  byte err
  //printf2("callMLI: cmd=$%x p_params=$%x\n", cmd, p_params)
  mliStub.8 = cmd
  mliStub:9 = p_params
  err = mliStub()
  return err
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def guaranteeMLI(cmd, p_params)
  byte err
  err = callMLI(cmd, p_params)
  if err > 0
    printf1("\nErr $%x\n", err)
    fatal("ProDOS error")
  fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _saveGame()

  // Perform garbage collection and record the size of the heap so we can restore it correctly
  mmgr(FINISH_LOAD, WITH_CLOSE)
  global=>w_heapSize = mmgr(HEAP_COLLECT, 0) - HEAP_BOTTOM

  // Copy data to main memory
  showMapName("Saving game...")
  diskActivity($FF)
  copyHeap(0)  // aux to main

  // Open the file if it already exists...
  open_filename = @game1_filename
  open_buffer = $5000
  if callMLI(MLI_OPEN, @open_params) > 0
    create_filename = open_filename
    create_accessbits = $C3  // full access
    create_filetype = $F1 // user type 1
    create_auxtype = 0
    create_storagetype = 1
    create_date = 0
    create_time = 0
    guaranteeMLI(MLI_CREATE, @create_params)
    guaranteeMLI(MLI_OPEN, @open_params)
  fin

  // Write the game data to it
  write_fileref = open_fileref
  write_addr = $4000
  write_length = $800 // FIXME
  guaranteeMLI(MLI_WRITE, @write_params)

  // All done.
  close_fileref = open_fileref
  guaranteeMLI(MLI_CLOSE, @close_params)
  diskActivity(0)
end

def loadInternal()
  word p_loaded
  mmgr(FINISH_LOAD, WITH_CLOSE)

  // Open the file
  open_filename = @game1_filename
  open_buffer = $5000
  if callMLI(MLI_OPEN, @open_params) > 0
    return FALSE
  else
    // Read the game data from it
    read_fileref = open_fileref
    read_addr = $4000
    read_length = $800 // FIXME
    guaranteeMLI(MLI_READ, @read_params)

    // All done with the file
    close_fileref = open_fileref
    guaranteeMLI(MLI_CLOSE, @close_params)
  fin

  // Init the heap with the correct size
  p_loaded = $4000
  initHeap(p_loaded=>w_heapSize)
  global = getGlobals()

  // Now copy the data back up to the heap space, and we're done
  copyHeap(1)  // main to aux
  return TRUE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _loadGame()
  diskActivity($FF)
  showMapName("Loading game...")

  // Open the file
  ^$4000 = 0  // so 3D engine knows we overwrite HGR page 2, even if we fail
  if !loadInternal()
    diskActivity(0)
    showMapName("Not found.")
    getUpperKey()
  else
    diskActivity(0)
  fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def newGame()
  word playersModule, globalScriptsModule
  initHeap(0) // initially empty heap
  global = getGlobals()
  playersModule = mmgr(QUEUE_LOAD, MODULE_GEN_PLAYERS<<8 | RES_TYPE_MODULE)
  globalScriptsModule = mmgr(QUEUE_LOAD, MODULE_GEN_GLOBAL_SCRIPTS<<8 | RES_TYPE_MODULE)
  mmgr(FINISH_LOAD, LEAVE_OPEN)
  playersModule()=>makeInitialParty()
  if sc_newGame >= 0; globalScriptsModule()=>sc_newGame(); fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def gameExists()
  open_filename = @game1_filename
  open_buffer = $5000
  if callMLI(MLI_OPEN, @open_params) > 0; return FALSE; fin
  close_fileref = open_fileref
  guaranteeMLI(MLI_CLOSE, @close_params)
  return TRUE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _newOrLoadGame()
  byte key

  if !gameExists()
    newGame(); return 1
  fin

  home()
  ^$c053
  ^$25 = 20
  puts("\n    N)ew game, or L)oad last game? ")

  while TRUE
    key = rdkey() & $7F
    if key > $60; key = key - $20; fin // convert to upper-case
    if key == 'N'
      ^$c052
      newGame()
      return 1
    elsif key == 'L'
      ^$c052
      if loadInternal()
        return 0
      fin
    fin
    ^$c053
    beep()
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
global = getGlobals()
return @funcTbl
done
